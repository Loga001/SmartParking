#include <ArduinoOTA.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP32Servo.h>

// Wi-Fi credentials
#define WIFI_SSID "Loga"
#define WIFI_PASSWORD "123456789"

// Firebase credentials
#define API_KEY "AIzaSyBTZJi2J0NMr6cQCiIU1kiZNC6bUhJ7gwM"
#define DATABASE_URL "https://smartparkingesp32-6e893-default-rtdb.firebaseio.com"

// Firebase user credentials
#define USER_EMAIL "lokeshkd525@gmail.com"
#define USER_PASSWORD "Lokesh123"

// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// LCD and Servo
LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo gateServo;

// Sensor pins
#define IR1 34
#define IR2 35
#define IR3 32
#define TRIG 18
#define ECHO 19
#define SERVO_PIN 27

int slotStatus[3];
bool carPreviouslyDetected = false;

void setup() {
  Serial.begin(115200);

  pinMode(IR1, INPUT);
  pinMode(IR2, INPUT);
  pinMode(IR3, INPUT);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);

  gateServo.attach(SERVO_PIN);
  gateServo.write(0);  // Start gate closed

  lcd.init();
  lcd.backlight();

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nWi-Fi Connected");

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

long readUltrasonic() {
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
  long duration = pulseIn(ECHO, HIGH, 25000);  // Shorter timeout
  return duration * 0.034 / 2;
}

void loop() {
  long distance = readUltrasonic();
  Serial.println("Distance: " + String(distance) + " cm");

  // Read IR sensor values
  slotStatus[0] = digitalRead(IR1);
  slotStatus[1] = digitalRead(IR2);
  slotStatus[2] = digitalRead(IR3);

  int available = 0;

  // Update Firebase slot statuses
  for (int i = 0; i < 3; i++) {
    bool occupied = (slotStatus[i] == LOW);
    String path = "/slots/slot" + String(i + 1);
    Firebase.RTDB.setBool(&fbdo, path.c_str(), occupied);
    if (!occupied) available++;
  }

  bool carDetected = (distance > 0 && distance < 8);  // Reduced detection range

  // Trigger gate if a new car is detected
  if (carDetected && !carPreviouslyDetected) {
    if (available > 0) {
      gateServo.write(90);  // Open gate
      Firebase.RTDB.setString(&fbdo, "/gate", "Opened");
      delay(1500);  // Faster response time
      gateServo.write(0);   // Close gate
      Firebase.RTDB.setString(&fbdo, "/gate", "Closed");
    } else {
      lcd.setCursor(0, 1);
      lcd.print("  No Slots Free  ");
    }
    carPreviouslyDetected = true;
  }

  // Reset if car moved away
  if (!carDetected && carPreviouslyDetected) {
    carPreviouslyDetected = false;
  }

  // Update LCD
  lcd.clear();
  
  lcd.setCursor(0, 0);
  lcd.print("S1:");
  lcd.print(slotStatus[0] == LOW ? "Full " : "Empty");

  lcd.setCursor(8, 0);
  lcd.print("S2:");
  lcd.print(slotStatus[1] == LOW ? "Full " : "Empty");

  lcd.setCursor(0, 1);
  lcd.print("S3:");
  lcd.print(slotStatus[2] == LOW ? "Full " : "Empty");

  delay(400);  // Faster refresh
}
